
import { createClient } from '@supabase/supabase-js';
import type { VercelRequest, VercelResponse } from '@vercel/node';

// --- SQL to run in Supabase Editor to create chat_messages table ---
/*
-- 1. Create the table
CREATE TABLE public.chat_messages (
  id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
  created_at timestamp with time zone DEFAULT now() NOT NULL,
  room_id uuid NOT NULL REFERENCES public.chat_rooms(id) ON DELETE CASCADE,
  user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  user_email text NOT NULL,
  content text NOT NULL
);

-- 2. Enable Row Level Security (RLS)
ALTER TABLE public.chat_messages ENABLE ROW LEVEL SECURITY;

-- 3. Create Policies for RLS
-- Allow anyone to view messages. This is safe because chat rooms are per-exercise.
CREATE POLICY "Allow public read access to messages"
  ON public.chat_messages FOR SELECT
  USING (true);

-- Allow authenticated users to send messages, but only as themselves.
CREATE POLICY "Allow authenticated users to send messages"
  ON public.chat_messages FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = user_id);
*/

export default async function handler(req: VercelRequest, res: VercelResponse) {
    res.setHeader('Access-Control-Allow-Credentials', 'true');
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET,OPTIONS');
    res.setHeader(
        'Access-Control-Allow-Headers',
        'Authorization, X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version'
    );

    if (req.method === 'OPTIONS') {
        res.status(200).end();
        return;
    }

    if (req.method !== 'GET') {
        return res.status(405).json({ error: 'Method Not Allowed' });
    }

    const supabaseUrl = process.env.SUPABASE_URL;
    const supabaseAnonKey = process.env.SUPABASE_ANON_KEY;

    if (!supabaseUrl || !supabaseAnonKey) {
        return res.status(500).json({ error: 'Database configuration is missing' });
    }

    const { room_id } = req.query;

    if (!room_id || typeof room_id !== 'string') {
        return res.status(400).json({ error: 'room_id is required' });
    }

    const supabase = createClient(supabaseUrl, supabaseAnonKey);

    const { data, error } = await (supabase.from('chat_messages') as any)
        .select('*')
        .eq('room_id', room_id)
        .order('created_at', { ascending: true });

    if (error) {
        console.error('Error fetching messages:', error);
        return res.status(500).json({ error: 'Failed to fetch messages' });
    }

    return res.status(200).json(data);
}
