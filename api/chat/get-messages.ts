
import { createClient } from '@supabase/supabase-js';
import type { VercelRequest, VercelResponse } from '@vercel/node';

// --- SQL to run in Supabase Editor to create chat_messages table ---
/*
-- 1. Create the table
CREATE TABLE public.chat_messages (
  id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
  created_at timestamp with time zone DEFAULT now() NOT NULL,
  room_id uuid NOT NULL REFERENCES public.chat_rooms(id) ON DELETE CASCADE,
  user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  user_email text NOT NULL,
  content text NOT NULL
);

-- 2. Enable Row Level Security (RLS)
ALTER TABLE public.chat_messages ENABLE ROW LEVEL SECURITY;

-- 3. Create Policies for RLS
-- Allow anyone to view messages. This is safe because chat rooms are per-exercise.
CREATE POLICY "Allow public read access to messages"
  ON public.chat_messages FOR SELECT
  USING (true);

-- Allow authenticated users to send messages, but only as themselves.
CREATE POLICY "Allow authenticated users to send messages"
  ON public.chat_messages FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = user_id);
*/

// --- CONFIGURATION SERVER (BACKEND) ---
// Cette fonction s'exécute sur les serveurs de Vercel.
// Elle utilise les variables d'environnement `SUPABASE_URL` et `SUPABASE_ANON_KEY`
// que vous devez configurer dans les paramètres de votre projet Vercel.
// N'UTILISEZ PAS les préfixes `VITE_` ici.

export default async function handler(req: VercelRequest, res: VercelResponse) {
    res.setHeader('Access-Control-Allow-Credentials', 'true');
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET,OPTIONS');
    res.setHeader(
        'Access-Control-Allow-Headers',
        'Authorization, X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version'
    );

    if (req.method === 'OPTIONS') {
        res.status(200).end();
        return;
    }
    
    try {
        if (req.method !== 'GET') {
            return res.status(405).json({ error: 'Method Not Allowed' });
        }

        const supabaseUrl = process.env.SUPABASE_URL;
        const supabaseAnonKey = process.env.SUPABASE_ANON_KEY;

        const missingVars = [];
        if (!supabaseUrl) missingVars.push('SUPABASE_URL');
        if (!supabaseAnonKey) missingVars.push('SUPABASE_ANON_KEY');

        if (missingVars.length > 0) {
            const errorMsg = `Configuration du serveur incomplète. Variables d'environnement manquantes: ${missingVars.join(', ')}`;
            return res.status(500).json({ error: errorMsg });
        }

        const { room_id } = req.query;

        if (!room_id || typeof room_id !== 'string') {
            return res.status(400).json({ error: 'room_id is required' });
        }

        const supabase = createClient(supabaseUrl, supabaseAnonKey);

        const { data, error } = await (supabase.from('chat_messages') as any)
            .select('*')
            .eq('room_id', room_id)
            .order('created_at', { ascending: true });

        if (error) {
            console.error('Supabase error fetching messages:', error);
            if (error.code === '42P01') { // undefined_table
                return res.status(500).json({ error: "Configuration de la base de données incomplète : la table 'chat_messages' est manquante. Veuillez exécuter le SQL de configuration." });
            }
            return res.status(500).json({ error: `Erreur base de données : ${error.message}` });
        }

        return res.status(200).json(data);
    } catch (e: any) {
        console.error('Catastrophic error in get-messages handler:', e);
        return res.status(500).json({ error: `Erreur interne du serveur : ${e.message}` });
    }
}
