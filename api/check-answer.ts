import { GoogleGenAI, Type } from "@google/genai";
import { createClient } from "@supabase/supabase-js";
import type { VercelRequest, VercelResponse } from '@vercel/node';
import { checkUsageLimit, logAiCall } from './_lib/ai-usage-limiter.js';
import { getExerciseById } from "./_lib/data-access.js";
import { validateMathResponse } from "./_lib/math-validator.js";
import { cleanLatex } from "../src/utils/math-format.js";

export default async function handler(req: VercelRequest, res: VercelResponse) {
    res.setHeader('Access-Control-Allow-Credentials', 'true');
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'POST,OPTIONS');
    res.setHeader(
        'Access-Control-Allow-Headers',
        'Authorization, X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version'
    );
    
    if (req.method === 'OPTIONS') {
        res.status(200).end();
        return;
    }

    if (req.method !== 'POST') {
        return res.status(405).json({ error: 'Method Not Allowed' });
    }

    const apiKey = process.env.GEMINI_API_KEY;
    const supabaseUrl = process.env.SUPABASE_URL;
    const supabaseServiceKey = process.env.SUPABASE_SERVICE_KEY;

    if (!apiKey || !supabaseUrl || !supabaseServiceKey) {
        return res.status(500).json({ error: "La configuration du serveur est incompl√®te." });
    }

    try {
        // --- User Authentication ---
        const authHeader = req.headers.authorization;
        if (!authHeader) {
            return res.status(401).json({ error: 'L\'authentification est requise.' });
        }
        const token = authHeader.split(' ')[1];
        const supabase = createClient(supabaseUrl, supabaseServiceKey);
        const { data: { user }, error: userError } = await supabase.auth.getUser(token);

        if (userError || !user) {
            return res.status(401).json({ error: 'Jeton d\'authentification invalide ou expir√©.' });
        }

        // --- Rate Limiting ---
        const { limitExceeded, limit } = await checkUsageLimit(supabase, user.id, 'ANSWER_VALIDATION');
        if (limitExceeded) {
             const error: any = new Error(`Vous avez atteint votre limite de ${limit} validations de r√©ponse par jour.`);
             error.status = 429;
             throw error;
        }
        
        // --- Main Logic ---
        let { studentAnswer, exerciseId } = req.body;
        if (!studentAnswer || !exerciseId) {
            return res.status(400).json({ error: "Les champs 'studentAnswer' et 'exerciseId' sont requis." });
        }

        // Clean the student's answer to ensure it uses standard LaTeX delimiters
        studentAnswer = cleanLatex(studentAnswer);
        
        // --- Fetch Exercise using the new optimized method ---
        const exercise = await getExerciseById(exerciseId);
        if (!exercise) {
            return res.status(404).json({ error: "Exercice non trouv√©." });
        }

        // Truncate the correction context to avoid overly long prompts
        const correctionContext = exercise.fullCorrection || exercise.correctionSnippet;
        const truncatedCorrection = correctionContext.length > 2500 ? (correctionContext.substring(0, 2500) + "\n...") : correctionContext;

        const prompt = `
            CONTEXTE: Tu es un assistant IA correcteur de math√©matiques pour des lyc√©ens marocains. Tu dois √™tre rigoureux, encourageant et tr√®s clair.

            MISSION: √âvaluer la r√©ponse d'un √©l√®ve √† un exercice de math√©matiques et fournir un feedback structur√© en JSON.

            INSTRUCTIONS D√âTAILL√âES:
            1.  **Analyse Comparative**: Compare la "R√âPONSE DE L'√âL√àVE" avec la "CORRECTION DE R√âF√âRENCE" et "l'√âNONC√â".
            2.  **D√©composition Logique**: S√©pare la r√©ponse de l'√©l√®ve en parties distinctes et logiques (ex: "Question 1a", "Calcul de la d√©riv√©e", "√âtude du signe", etc.).
            3.  **√âvaluation par Partie**: Pour chaque partie, d√©termine si elle est 'correct', 'incorrect', ou 'partial'.
                -   'correct': L'√©l√®ve a enti√®rement raison.
                -   'incorrect': L'√©l√®ve a commis une erreur majeure de raisonnement ou de calcul.
                -   'partial': L'√©l√®ve a la bonne id√©e mais a fait une petite erreur, ou sa r√©ponse est incompl√®te.
            4.  **Feedback Constructif**: Pour chaque partie, r√©dige une "explanation" claire qui valide la bonne r√©ponse, explique l'erreur, ou sugg√®re une am√©lioration.
            5.  **Synth√®se Globale**: R√©dige un "summary" global qui r√©sume la performance de l'√©l√®ve.
            6.  **Statut Final**: D√©termine "is_globally_correct". Mets "true" SEULEMENT si toutes les parties sont √©valu√©es comme 'correct'. Sinon, mets "false".

            R√àGLES DE FORMATAGE JSON (ABSOLUMENT OBLIGATOIRES):
            -   **SORTIE EXCLUSIVE**: Ta r√©ponse DOIT √™tre UNIQUEMENT un objet JSON valide, sans AUCUN texte, commentaire ou formatage Markdown en dehors de l'objet JSON lui-m√™me.
            -   **CHAMP 'evaluation'**: La valeur de ce champ doit OBLIGATOIREMENT √™tre l'une des trois cha√Ænes suivantes : "correct", "incorrect", "partial".
            -   **CHAMPS 'explanation' et 'summary'**:
                -   Utilise le Markdown pour la structure (listes √† puces *, titres ###).
                -   **Formatage Math√©matique Hybride**:
                    -   **Unicode (par d√©faut)**: Utilise les caract√®res Unicode pour le simple : \`∆í(ùë•) = ùë•¬≤ ‚àí 4ùë• + 1\`, \`‚àÄùë• ‚àà ‚Ñù\`.
                    -   **LaTeX (pour le complexe)**: Utilise \`$..$\` ou \`$$..$$\` SEULEMENT pour les fractions, racines, int√©grales, etc.
                    -   **INTERDICTION**: Ne JAMAIS utiliser \`\\(\` ou \`\\[\`.

            ---
            √âNONC√â DE L'EXERCICE:
            ${exercise.statement}
            ---
            CORRECTION DE R√âF√âRENCE (pour guider ton jugement):
            ${truncatedCorrection}
            ---
            R√âPONSE DE L'√âL√àVE √Ä √âVALUER:
            ${studentAnswer}
            ---
            G√âN√àRE MAINTENANT L'OBJET JSON D'√âVALUATION STRUCTUR√â.
        `;
        
        const answerSchema = {
            type: Type.OBJECT,
            properties: {
                is_globally_correct: {
                    type: Type.BOOLEAN,
                    description: "True si la r√©ponse globale de l'√©l√®ve est majoritairement correcte."
                },
                summary: {
                    type: Type.STRING,
                    description: "Un court bilan g√©n√©ral de la r√©ponse de l'√©l√®ve."
                },
                detailed_feedback: {
                    type: Type.ARRAY,
                    description: "Une liste de feedbacks d√©taill√©s pour chaque partie de la r√©ponse.",
                    items: {
                        type: Type.OBJECT,
                        properties: {
                            part_title: {
                                type: Type.STRING,
                                description: "Le titre de la partie √©valu√©e (ex: 'Question 1a', 'Factorisation')."
                            },
                            evaluation: {
                                type: Type.STRING,
                                description: "L'√©valuation de cette partie. Doit √™tre une de ces valeurs : 'correct', 'incorrect', 'partial'."
                            },
                            explanation: {
                                type: Type.STRING,
                                description: "L'explication d√©taill√©e pour cette partie, en Markdown et LaTeX."
                            }
                        },
                        required: ["part_title", "evaluation", "explanation"]
                    }
                }
            },
            required: ["is_globally_correct", "summary", "detailed_feedback"]
        };


        const ai = new GoogleGenAI({ apiKey: apiKey });
        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: prompt,
            config: { 
                responseMimeType: "application/json",
                responseSchema: answerSchema
            }
        });
        
        const jsonText = response.text?.trim();
        if (!jsonText) {
            throw new Error("L'IA a retourn√© une r√©ponse vide. Le mod√®le est peut-√™tre surcharg√©, veuillez r√©essayer.");
        }
        
        let parsedJson;
        try {
            parsedJson = JSON.parse(jsonText);
        } catch (e) {
            console.error("Failed to parse JSON from AI in check-answer. Raw response:", jsonText);
            throw new Error("La r√©ponse de l'IA √©tait mal format√©e. Veuillez r√©essayer.");
        }
        
        // Appliquer le nettoyage et la validation √† toute la r√©ponse JSON
        const finalResponse = validateMathResponse(parsedJson);

        // Log successful AI call
        await logAiCall(supabase, user.id, 'ANSWER_VALIDATION');
        
        return res.status(200).json(finalResponse);

    } catch (error: any) {
        console.error("Error in check-answer:", error);
        const status = error.status || 500;
        const message = error.message || "Une erreur interne est survenue.";
        return res.status(status).json({ error: message });
    }
}