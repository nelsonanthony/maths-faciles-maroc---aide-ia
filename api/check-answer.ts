
import { GoogleGenAI, Type } from "@google/genai";
import { createClient } from "@supabase/supabase-js";
import type { VercelRequest, VercelResponse } from '@vercel/node';
import aiUsageLimiter from './_lib/ai-usage-limiter';
import dataAccess from "./_lib/data-access";
import mathValidator from "./_lib/math-validator";
import { cleanLatex } from "../src/utils/math-format";

export default async function handler(req: VercelRequest, res: VercelResponse) {
    res.setHeader('Access-Control-Allow-Credentials', 'true');
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'POST,OPTIONS');
    res.setHeader(
        'Access-Control-Allow-Headers',
        'Authorization, X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version'
    );
    
    if (req.method === 'OPTIONS') {
        res.status(200).end();
        return;
    }

    if (req.method !== 'POST') {
        return res.status(405).json({ error: 'Method Not Allowed' });
    }

    const apiKey = process.env.GEMINI_API_KEY;
    const supabaseUrl = process.env.SUPABASE_URL;
    const supabaseServiceKey = process.env.SUPABASE_SERVICE_KEY;

    if (!apiKey || !supabaseUrl || !supabaseServiceKey) {
        return res.status(500).json({ error: "La configuration du serveur est incompl√®te." });
    }

    try {
        // --- User Authentication ---
        const authHeader = req.headers.authorization;
        if (!authHeader) {
            return res.status(401).json({ error: 'L\'authentification est requise.' });
        }
        const token = authHeader.split(' ')[1];
        const supabase = createClient(supabaseUrl, supabaseServiceKey);
        const { data: { user }, error: userError } = await supabase.auth.getUser(token);

        if (userError || !user) {
            return res.status(401).json({ error: 'Jeton d\'authentification invalide ou expir√©.' });
        }

        // --- Rate Limiting ---
        const { limitExceeded, limit } = await aiUsageLimiter.checkUsageLimit(supabase, user.id, 'ANSWER_VALIDATION');
        if (limitExceeded) {
             const error: any = new Error(`Vous avez atteint votre limite de ${limit} validations de r√©ponse par jour.`);
             error.status = 429;
             throw error;
        }
        
        // --- Main Logic ---
        let { studentAnswer, exerciseId } = req.body;
        if (!studentAnswer || !exerciseId) {
            return res.status(400).json({ error: "Les champs 'studentAnswer' et 'exerciseId' sont requis." });
        }

        // Clean the student's answer to ensure it uses standard LaTeX delimiters
        studentAnswer = cleanLatex(studentAnswer);
        
        // --- Fetch Exercise using the new optimized method ---
        const exercise = await dataAccess.getExerciseById(exerciseId);
        if (!exercise) {
            return res.status(404).json({ error: "Exercice non trouv√©." });
        }

        // Truncate the correction context to avoid overly long prompts
        const correctionContext = exercise.fullCorrection || exercise.correctionSnippet;
        const truncatedCorrection = correctionContext.length > 2500 ? (correctionContext.substring(0, 2500) + "\n...") : correctionContext;

        const systemInstruction = `
# PERSONA
Tu es "Prof Ayoub", un correcteur de math√©matiques pour lyc√©ens marocains. Ton ton est expert, rigoureux et encourageant. Tu utilises un fran√ßais simple et clair.

# MISSION
√âvaluer la r√©ponse d'un √©l√®ve et fournir un feedback JSON ultra-structur√© et fiable.

# PROCESSUS DE R√âFLEXION (Chain of Thought)
1.  **Analyse de l'√ânonc√©**: Je d√©compose l'exercice en sous-questions ou √©tapes logiques (ex: 1a, 1b, 2a).
2.  **Analyse de la R√©ponse √âl√®ve**: Je lis la r√©ponse de l'√©l√®ve et la segmente pour la faire correspondre aux √©tapes de l'√©nonc√©.
3.  **Comparaison et √âvaluation par Partie**: Pour chaque partie, je compare la r√©ponse de l'√©l√®ve √† la correction de r√©f√©rence.
    -   Je d√©termine l'√©valuation: \`correct\`, \`incorrect\`, ou \`partial\`.
    -   Je r√©dige une explication concise : f√©licitations si c'est juste, explication de l'erreur (sans donner la solution) si c'est faux.
4.  **Synth√®se Globale**: Je r√©dige un r√©sum√© (\`summary\`) global.
5.  **Conclusion Finale**: Je d√©termine \`is_globally_correct\` (doit √™tre \`true\` si et seulement si TOUTES les parties sont \`correct\`).
6.  **Assemblage JSON Final**: Je construis l'objet JSON en respectant √† la lettre la structure et les r√®gles de formatage. Si l'√©l√®ve n'a rien √©crit ou a √©crit quelque chose d'incoh√©rent, je le consid√®re comme 'incorrect' avec une explication appropri√©e.

# R√àGLES DE SORTIE (JSON STRICT)

## 1. Format JSON OBLIGATOIRE
Ta sortie DOIT √™tre un objet JSON valide, et RIEN D'AUTRE.

## 2. Structure et Exemple Concret
Utilise EXACTEMENT cette structure.
\`\`\`json
{
  "is_globally_correct": false,
  "summary": "Tu as bien identifi√© la m√©thode pour la question 1a, c'est un bon d√©but ! Cependant, il y a une erreur de calcul dans ton d√©veloppement qui a rendu la question 1b incorrecte. Fais bien attention √† la distributivit√©.",
  "detailed_feedback": [
    {
      "part_title": "Question 1) a) - Montrer que f(x) = f(4-x)",
      "evaluation": "partial",
      "explanation": "L'id√©e de partir de $f(4-x)$ est excellente. Tu as bien remplac√© $x$ par $(4-x)$ dans l'expression. Ton d√©veloppement de $(4-x)^2$ est juste, mais tu as fait une petite erreur de signe en d√©veloppant $-4(4-x)$. Recalcule bien cette partie et tu y es presque !"
    },
    {
      "part_title": "Question 1) b) - D√©duire que f n'est pas injective",
      "evaluation": "incorrect",
      "explanation": "Ton raisonnement est correct : pour montrer la non-injectivit√©, il suffit de trouver deux valeurs diff√©rentes qui ont la m√™me image. Cependant, l'exemple que tu as utilis√© est bas√© sur la conclusion de la question pr√©c√©dente. Comme ton calcul en 1a √©tait erron√©, cette partie est aussi incorrecte."
    }
  ]
}
\`\`\`

## 3. R√®gles pour le champ \`evaluation\`
Le champ \`evaluation\` doit √™tre l'une des trois valeurs suivantes, sans exception : \`"correct"\`, \`"incorrect"\`, \`"partial"\`.

## 4. Formatage Math√©matique
Dans les cha√Ænes de caract√®res (\`summary\`, \`explanation\`), utilise imp√©rativement le formatage hybride suivant :
-   **Priorit√© √† Unicode**: Pour les symboles simples, utilise les caract√®res Unicode (ex: \`∆í(ùë•) = ùë•¬≤ ‚àí 4ùë• + 1\`, \`‚àÄùë• ‚àà ‚Ñù\`).
-   **LaTeX pour le Complexe**: Utilise les d√©limiteurs \`$..$\` (en ligne) et \`$$..$$\` (en bloc) UNIQUEMENT pour les fractions, racines, sommes, etc.
-   **INTERDICTION**: N'utilise JAMAIS les d√©limiteurs MathJax comme \`\\( ... \\)\` ou \`\\[ ... \\]\`.
`;

        const userPrompt = `
L'√©l√®ve a soumis sa r√©ponse √† l'exercice suivant. √âvalue-la en suivant scrupuleusement tes instructions.

--- √âNONC√â DE L'EXERCICE ---
${exercise.statement}
--- CORRECTION DE R√âF√âRENCE ---
${truncatedCorrection}
--- R√âPONSE DE L'√âL√àVE ---
${studentAnswer}
---

G√âN√àRE L'OBJET JSON MAINTENANT.
`;
        
        const answerSchema = {
            type: Type.OBJECT,
            properties: {
                is_globally_correct: {
                    type: Type.BOOLEAN,
                    description: "True si la r√©ponse globale de l'√©l√®ve est majoritairement correcte."
                },
                summary: {
                    type: Type.STRING,
                    description: "Un court bilan g√©n√©ral de la r√©ponse de l'√©l√®ve."
                },
                detailed_feedback: {
                    type: Type.ARRAY,
                    description: "Une liste de feedbacks d√©taill√©s pour chaque partie de la r√©ponse.",
                    items: {
                        type: Type.OBJECT,
                        properties: {
                            part_title: {
                                type: Type.STRING,
                                description: "Le titre de la partie √©valu√©e (ex: 'Question 1a', 'Factorisation')."
                            },
                            evaluation: {
                                type: Type.STRING,
                                description: "L'√©valuation de cette partie. Doit √™tre une de ces valeurs : 'correct', 'incorrect', 'partial'."
                            },
                            explanation: {
                                type: Type.STRING,
                                description: "L'explication d√©taill√©e pour cette partie, en Markdown et LaTeX."
                            }
                        },
                        required: ["part_title", "evaluation", "explanation"]
                    }
                }
            },
            required: ["is_globally_correct", "summary", "detailed_feedback"]
        };


        const ai = new GoogleGenAI({ apiKey: apiKey });
        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: userPrompt,
            config: {
                systemInstruction,
                responseMimeType: "application/json",
                responseSchema: answerSchema
            }
        });
        
        const jsonText = response.text;
        if (!jsonText) {
            throw new Error("L'IA a retourn√© une r√©ponse vide. Le mod√®le est peut-√™tre surcharg√©, veuillez r√©essayer.");
        }
        
        let parsedJson;
        try {
            parsedJson = JSON.parse(jsonText.trim());
        } catch (e) {
            console.error("Failed to parse JSON from AI in check-answer. Raw response:", jsonText);
            throw new Error("La r√©ponse de l'IA √©tait mal format√©e. Veuillez r√©essayer.");
        }
        
        // Appliquer le nettoyage et la validation √† toute la r√©ponse JSON
        const finalResponse = mathValidator.validateMathResponse(parsedJson);

        // Log successful AI call
        await aiUsageLimiter.logAiCall(supabase, user.id, 'ANSWER_VALIDATION');
        
        return res.status(200).json(finalResponse);

    } catch (error: any) {
        console.error("Error in check-answer:", error);
        const status = error.status || 500;
        const message = error.message || "Une erreur interne est survenue.";
        return res.status(status).json({ error: message });
    }
}
