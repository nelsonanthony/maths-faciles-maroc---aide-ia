
import { GoogleGenAI, Type } from "@google/genai";
import { createClient } from "@supabase/supabase-js";
import type { VercelRequest, VercelResponse } from '@vercel/node';
import type { DialogueMessage } from '../src/types.js';
import aiUsageLimiter from './_lib/ai-usage-limiter.js';
import { cleanLatex } from "./_lib/math-validator.js";

export default async function handler(req: VercelRequest, res: VercelResponse) {
    res.setHeader('Access-Control-Allow-Credentials', 'true');
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'POST,OPTIONS');
    res.setHeader(
        'Access-Control-Allow-Headers',
        'Authorization, X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version'
    );
    
    if (req.method === 'OPTIONS') {
        res.status(200).end();
        return;
    }

    if (req.method !== 'POST') {
        return res.status(405).json({ error: 'Method Not Allowed' });
    }

    const apiKey = process.env.GEMINI_API_KEY;
    const supabaseUrl = process.env.SUPABASE_URL;
    const supabaseServiceKey = process.env.SUPABASE_SERVICE_KEY;

    const missingVars = [];
    if (!apiKey) missingVars.push('GEMINI_API_KEY');
    if (!supabaseUrl) missingVars.push('SUPABASE_URL');
    if (!supabaseServiceKey) missingVars.push('SUPABASE_SERVICE_KEY');

    if (missingVars.length > 0) {
        const errorMsg = `Configuration du serveur incompl√®te. Variables d'environnement manquantes: ${missingVars.join(', ')}`;
        return res.status(500).json({ error: errorMsg });
    }

    try {
        const authHeader = req.headers.authorization;
        if (!authHeader) {
            return res.status(401).json({ error: 'L\'authentification est requise.' });
        }
        const token = authHeader.split(' ')[1];
        const supabase = createClient(supabaseUrl!, supabaseServiceKey!);
        const { data: { user }, error: userError } = await supabase.auth.getUser(token);

        if (userError || !user) {
            return res.status(401).json({ error: 'Jeton d\'authentification invalide ou expir√©.' });
        }

        const { limitExceeded, limit } = await aiUsageLimiter.checkUsageLimit(supabase, user.id, 'SOCRATIC_VALIDATION');
        if (limitExceeded) {
            const error: any = new Error(`Vous avez atteint votre limite de ${limit} v√©rifications par jour.`);
            error.status = 429;
            throw error;
        }
        
        let { studentAnswer, currentIaQuestion, expectedAnswerKeywords, exerciseStatement, exerciseCorrection, dialogueHistory } = req.body as { 
            studentAnswer?: string, 
            currentIaQuestion?: string, 
            expectedAnswerKeywords?: string[],
            exerciseStatement?: string,
            exerciseCorrection?: string,
            dialogueHistory?: DialogueMessage[]
        };
        
        if (studentAnswer === undefined) {
             return res.status(400).json({ error: "Le champ 'studentAnswer' est requis (peut √™tre vide)." });
        }
        if (!currentIaQuestion || !Array.isArray(expectedAnswerKeywords) || !exerciseStatement || !exerciseCorrection || !Array.isArray(dialogueHistory)) {
            return res.status(400).json({ error: "Les champs 'currentIaQuestion', 'expectedAnswerKeywords', 'exerciseStatement', 'exerciseCorrection' et 'dialogueHistory' sont requis." });
        }

        // Clean student answer to ensure consistent LaTeX format
        studentAnswer = cleanLatex(studentAnswer);
        
        const ai = new GoogleGenAI({ apiKey: apiKey! });
        
        const answerSchema = {
            type: Type.OBJECT,
            properties: {
                is_correct: {
                    type: Type.BOOLEAN,
                    description: "True si la r√©ponse de l'√©l√®ve est conceptuellement correcte, sinon false."
                },
                feedback_message: {
                    type: Type.STRING,
                    description: "Si correct, un feedback positif. Si incorrect, un indice contextuel bas√© sur l'erreur de l'√©l√®ve. Doit √™tre encourageant et en fran√ßais simple."
                }
            },
            required: ["is_correct", "feedback_message"],
        };

        const formattedHistory = (dialogueHistory || [])
            .slice(-10) // Take last 10 messages to avoid overly long prompts
            .map(msg => `${msg.role === 'ai' ? 'Tuteur' : '√âl√®ve'}: ${msg.content}`)
            .join('\n\n');

        const promptText = `
# CONTEXTE GLOBAL
Tu es un tuteur de math√©matiques expert. Ton r√¥le est d'√©valuer la r√©ponse d'un √©l√®ve √† TA DERNI√àRE question, en te basant sur l'HISTORIQUE COMPLET de la conversation pour √™tre le plus pertinent possible.

## Infos sur l'exercice
- **√ânonc√©**: ${exerciseStatement}
- **Correction (pour info)**: ${exerciseCorrection}

# PROCESSUS DE R√âFLEXION (Chain of Thought)
1.  **Relire ma derni√®re question**: Je regarde la toute derni√®re chose que J'AI dite dans l'historique ci-dessous. C'est la question √† laquelle l'√©l√®ve est cens√© r√©pondre.
2.  **Analyser la r√©ponse de l'√©l√®ve**: Je lis la r√©ponse de l'√©l√®ve. Est-ce qu'elle r√©pond √† ma question ? Est-elle correcte math√©matiquement ? Est-elle √† c√¥t√© de la plaque ?
3.  **Comparer aux attentes**: Je compare sa r√©ponse aux \`expected_answer_keywords\`. Est-ce que les concepts y sont ?
4.  **D√©cider de la validit√©**: Je d√©cide si \`is_correct\` est \`true\` ou \`false\`. M√™me si la r√©ponse est formul√©e diff√©remment, si le concept est bon, c'est \`true\`.
5.  **R√©diger le feedback**:
    -   **Si correcte**: Je r√©dige un message positif. Je peux m√™me anticiper tr√®s bri√®vement la suite pour que la transition soit fluide.
    -   **Si incorrecte**: J'analyse PR√âCIS√âMENT l'erreur. Est-ce un simple oubli ? Une erreur de calcul ? Une incompr√©hension totale du concept ? Mon indice doit √™tre directement li√© √† CETTE erreur sp√©cifique. Je ne dois PAS donner un indice g√©n√©rique. Je dois me baser sur ce que l'√©l√®ve a √©crit.
6.  **Construire le JSON**: J'assemble l'objet JSON final en respectant les r√®gles.

# HISTORIQUE DE LA CONVERSATION (le plus r√©cent est en bas)
${formattedHistory}

# MISSION
√âvalue la **derni√®re** r√©ponse de l'√©l√®ve (fournie ci-dessous) en tenant compte de tout l'historique. Fournis une r√©ponse JSON structur√©e.

## √âvaluation
- **Derni√®re question pos√©e √† l'√©l√®ve**: "${currentIaQuestion}"
- **Concepts cl√©s attendus dans la r√©ponse**: "${expectedAnswerKeywords.join(', ')}"
- **R√©ponse fournie par l'√©l√®ve**: "${studentAnswer || "L'√©l√®ve n'a rien r√©pondu."}"

# FORMAT DE SORTIE
R√©ponds UNIQUEMENT avec un objet JSON valide suivant ce sch√©ma : \`{ "is_correct": boolean, "feedback_message": "Ton message ici..." }\`.
Dans ton \`feedback_message\`, l'utilisation des d√©limiteurs LaTeX comme \`$\` ou \`$$\` est **STRICTEMENT INTERDITE**. Utilise **UNIQUEMENT** des caract√®res Unicode pour les math√©matiques (ex: ∆í(ùë•), ùë•¬≤, ‚àà).
`;
        
        const requestPayload = {
            model: 'gemini-2.5-flash',
            contents: promptText,
            config: { 
                responseMimeType: "application/json", 
                responseSchema: answerSchema
            }
        };
        

        const response = await ai.models.generateContent(requestPayload);
        
        const jsonText = response.text;
        if (!jsonText) {
            throw new Error("L'IA a retourn√© une r√©ponse vide. Veuillez r√©essayer.");
        }
        
        let parsedJson;
        try {
            parsedJson = JSON.parse(jsonText.trim());
        } catch (e) {
            console.error("Failed to parse JSON from AI in validate-socratic-answer. Raw response:", jsonText);
            throw new Error("La r√©ponse de l'IA √©tait mal format√©e. Veuillez r√©essayer.");
        }
        
        await aiUsageLimiter.logAiCall(supabase, user.id, 'SOCRATIC_VALIDATION');
        
        return res.status(200).json(parsedJson);

    } catch (error: any) {
        console.error("Error in validate-socratic-answer:", error);
        const status = error.status || 500;
        const message = error.message || "Une erreur interne est survenue.";
        return res.status(status).json({ error: message });
    }
}
